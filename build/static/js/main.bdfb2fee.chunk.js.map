{"version":3,"sources":["components/ClockView.js","components/TimerView.js","components/IndTimerSession.js","components/TimerSSNSview.js","api/index.js","App.js","reportWebVitals.js","index.js"],"names":["ClockView","props","console","log","timezone","className","clockTime","currentTimezone","onClick","TimerView","hoursCntr","minutesCntr","secondsCntr","intervalsCntr","i","push","intervals","length","time","id","interval","isSaveOn","placeholder","onChange","timerInUse","timerValue","current","statusBtn","IndTimerSession","intervalIsOpen","previewIntervals","allIntervals","session","_id","currentSession","isSessionOpen","name","description","TimerSSNSview","indSessionCntr","sessions","isSessionClosed","apis","insertSession","payload","axios","post","getAllSessions","get","deleteSessionById","delete","getMovieById","App","state","sessionOpen","sessionClosed","hoursInput","minutesInput","secondsInput","crntSessionIntrvls","setClock","a","date","Date","toLocaleString","timeZone","finalDate","split","setState","timeClock","clockTimeout","setTimeout","clockView","clearTimeout","currentTimer","crntHours","parseInt","crntMinutes","crntSecs","timer","intervalCanceled","timerPaused","alert","timeAcr","intervalTime","initialTime","prevState","e","target","nameSessionInput","value","descriptionInput","searchResult","timerSessions","filter","toLowerCase","search","api","then","data","timerView","sessionsView","allSessions","getAttribute","catch","err","updatedList","saveSessionOn","forEach","object","obj","to","path","element","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdfb2fee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ClockView = (props) => {\r\n\r\n    console.log(props.timezone)\r\n    const clickedTimezoneE = () => props.currentTimezone === 'America/New_York' ? ' clicked' : '' ;\r\n    const clickedTimezoneC = () => props.currentTimezone === 'America/Denver' ? ' clicked' : '' ;\r\n    const clickedTimezoneP = () => props.currentTimezone === 'America/Los_Angeles' ? ' clicked' : '' ;\r\n\r\n    return (\r\n        <div className='clockViewCntr'>\r\n            <p className='clockViewHeading'>Clock</p>\r\n\r\n            <p className='mainClock'>{props.clockTime}</p>\r\n\r\n            <div className='timeZoneCntr'>\r\n                <p className={'indTimezone' + clickedTimezoneE()} timezone='America/New_York' onClick={props.onClick}>Eastern</p>\r\n                <p className={'indTimezone' + clickedTimezoneC()} timezone='America/Denver' onClick={props.onClick}>Central</p>\r\n                <p className={'indTimezone' + clickedTimezoneP()}timezone='America/Los_Angeles'onClick={props.onClick}>Pacific</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClockView;","import React from 'react';\r\n\r\nconst TimerView = (props) => {\r\n    let hoursCntr = [], minutesCntr = [], secondsCntr = [], intervalsCntr = [];\r\n\r\n    // For functions to populate the select elements to allow the user to choose time \r\n    for (let i = 0; i <= 24; i++) {\r\n        hoursCntr.push( <option key={i}>{i}</option>)\r\n    }\r\n    for (let i = 0; i <= 60; i++) {\r\n        minutesCntr.push( <option key={i}>{i}</option>)\r\n    }\r\n    for (let i = 0; i <= 60; i++) {\r\n        secondsCntr.push( <option key={i}>{i}</option>)\r\n    }\r\n\r\n    // Function to show the current intervals that have been completed\r\n    for (let i = 0; i < props.intervals.length; i++) {\r\n        intervalsCntr.push( <div className='indTimer' key={'Interval ' + i}>{props.intervals[i].time}<p id='removeTimerBtn' interval={props.intervals[i].interval} onClick={props.onClick}>X</p></div> );\r\n    }\r\n\r\n    return (\r\n        <div className='timerCntr'>\r\n            <p className='timerCntrHdng'>Timer</p>\r\n        \r\n            {props.isSaveOn ?\r\n               <div className='saveSessionCntr'>\r\n                    <input className='sessionNameInput' placeholder='Session Name' onChange={props.onChange}/>\r\n                    <div className='saveSessionBtn' onClick={props.onClick}>Save</div>\r\n                </div>\r\n            : <div className='saveBtn' onClick={props.onClick}>Save Session</div> }\r\n            \r\n            {props.isSaveOn ? <input className='descriptionInput' placeholder='Session Description' onChange={props.onChange}></input> : null }\r\n\r\n            { props.timerInUse ?\r\n                <p className='mainTimer'>{props.timerValue}</p> \r\n            :\r\n                <div className='inputTimer'>\r\n                    <select className='inputHours' onChange={props.onChange}>{hoursCntr}</select>\r\n                    <p>hrs</p>\r\n                    <select className='inputMinutes' onChange={props.onChange}>{minutesCntr}</select>\r\n                    <p>mins</p>\r\n                    <select className='inputSeconds' onChange={props.onChange}>{secondsCntr}</select>\r\n                    <p>sec</p>\r\n                </div>\r\n            }           \r\n\r\n            <div className='timerBtnsCntr'>\r\n                <div className='cancelBtn' onClick={props.onClick}>Cancel</div>\r\n                <div className='startPauseBtn' current={props.statusBtn} onClick={props.onClick}>{ props.statusBtn === 'start' ? 'Start' : props.statusBtn === 'pause' ? 'Pause' : null }</div>\r\n            </div>\r\n \r\n            <div className='crntTimersCntr'>\r\n                {intervalsCntr}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimerView;","import React from 'react';\r\n\r\nconst IndTimerSession = (props) => {\r\n    let intervalIsOpen = false, previewIntervals = [], allIntervals = [];\r\n       \r\n    // Sets the value of intervalIsopen to the value of the isSessionOpen props if the session id is the same as the props id\r\n    if (props.session._id === props.currentSession) {\r\n        intervalIsOpen = props.isSessionOpen;\r\n    }\r\n\r\n    // Shows the preview intervals according to the length - if there is only one interval within the session it will show that one interval but if there are more than one it will show the first two\r\n    if (props.session.intervals.length === 1) {\r\n        previewIntervals.push( <p className='intervalTime' key={'interval Time '}>{props.session.intervals[0] + \" mins\"}</p> )\r\n    }\r\n    else {\r\n        for (let i = 0; i < 2; i++) {\r\n            previewIntervals.push( <p className='intervalTime' key={'interval Time ' + i}>{props.session.intervals[i]}</p> )\r\n        }\r\n    }\r\n\r\n    // Show the intervals of a session when the session is open\r\n    for (let i = 0; i < props.session.intervals.length; i++) {\r\n        allIntervals.push(\r\n            <div className='indInterval' key={'interval ' + i}>\r\n                <p className='sessionInterval'>Interval {i + 1}</p>\r\n                <p className='intervalTimeOpen'>{props.session.intervals[i]}</p>\r\n            </div>\r\n        )\r\n    } \r\n\r\n    return (\r\n        <div className='indTimerSession'>\r\n            { intervalIsOpen === false ?\r\n                <div className='timerSessionCls' session={props.session._id} onClick={props.onClick}>\r\n                    <div className='name-rmvBtnCntr'>\r\n                        <p className='nameOfSession'>{props.session.name}</p>\r\n                        <div className='removeSessionBtn' session={props.session._id}>Remove</div>\r\n                    </div>\r\n\r\n                    <div className='intervalsCntrCls'>\r\n                        {previewIntervals}\r\n                    </div>\r\n                </div>\r\n            :\r\n                <div className='timerSessionOpen' session={props.session._id} onClick={props.onClick}>\r\n                    <div className='name-rmvBtnCntr'>\r\n                        <p className='nameOfSessionOpen'>{props.session.name}</p>\r\n                        <div className='removeSessionBtn' session={props.session._id}>Remove</div>\r\n                    </div>\r\n\r\n                    <p className='descriptionSession'>{props.session.description}</p>\r\n\r\n                    <div className='intervalsCntrOpen'>\r\n                      {allIntervals}\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IndTimerSession;","import React from 'react';\r\nimport IndTimerSession from './IndTimerSession';\r\n\r\nconst TimerSSNSview = (props) => {\r\n    let indSessionCntr = [];\r\n\r\n    // Will show all of the ind sessions within the database\r\n    if (props.sessions) {\r\n        for (let i = 0; i < props.sessions.length; i++) {\r\n            indSessionCntr.push( <IndTimerSession currentSession={props.currentSession} isSessionOpen={props.isSessionOpen} isSessionClosed={props.isSessionClosed} session={props.sessions[i]} onClick={props.onClick} key={'Session ' + i}/> )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='timerSsnsView'>\r\n            <p className='timerSsnsHdng'>Saved Timer Sessions</p>\r\n\r\n            <input className='searchbar' onChange={props.onChange} placeholder='Search Saved Session...'/> \r\n\r\n            <div className='timerSsnsCntr'>\r\n                {indSessionCntr}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimerSSNSview;","import axios from 'axios'\r\n\r\nexport const insertSession = payload => axios.post('/api/session', payload);\r\nexport const getAllSessions = () => axios.get('/api/session');\r\nexport const deleteSessionById = id => axios.delete(`/api/session/${id}`);\r\nexport const getMovieById = id => axios.get(`/api/session/${id}`);\r\n\r\nconst apis = { insertSession, getAllSessions, deleteSessionById, getMovieById };\r\n\r\nexport default apis;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport ClockView from './components/ClockView';\nimport TimerView from './components/TimerView';\nimport TimerSSNSview from './components/TimerSSNSview';\nimport api from './api';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sessionOpen: false,\n      sessionClosed: true,\n      statusBtn: 'start',\n      hoursInput: 0,\n      minutesInput: 0,\n      secondsInput: 0,\n      crntSessionIntrvls: [],\n    }\n  }\n\n  render () {\n    \n    const setClock = async () => {\n      // Function to set the time for the clock view according to the value of the timezone state as long as the clock view is the current view\n      let date = new Date(), finalDate;\n      finalDate = await date.toLocaleString(('en-US'), { timeZone: this.state.timezone })\n      finalDate = finalDate.split(' ');\n      finalDate = `${finalDate[1]} ${finalDate[2]}`\n\n      this.setState({ timeClock: finalDate});\n      let clockTimeout = setTimeout( () => setClock(), 1000 )\n      \n      if (!this.state.clockView) { clearTimeout(clockTimeout) };\n    }\n\n    const currentTimer = () => {\n      // Set the new timer according to the values of the hours, minutes, and seconds input states and runs the timer \n      let crntHours = parseInt(this.state.hoursInput), crntMinutes = parseInt(this.state.minutesInput), crntSecs = parseInt(this.state.secondsInput); \n\n      // Main timer countdown code \n      if (crntSecs > 0) {\n        crntSecs = crntSecs - 1;\n        this.setState({ secondsInput: crntSecs });\n      }\n      else if (crntSecs === 0) {\n        if (crntMinutes > 0) {\n          crntMinutes = crntMinutes - 1;\n          crntSecs = 59;\n          this.setState({ minutesInput: crntMinutes});\n          this.setState({ secondsInput: crntSecs });\n        }\n        else if (crntMinutes === 0) {\n          if (crntHours > 0) {\n            crntHours = crntHours - 1;\n            crntMinutes = 59;\n            crntSecs = 59;\n            this.setState({ hoursInput: crntHours }); \n            this.setState({ minutesInput: crntMinutes }); \n            this.setState({ secondsInput: crntSecs }); \n          }\n        }\n      }\n      this.setState({ timerValue: `${crntHours}:${crntMinutes}:${crntSecs}`});\n\n      let timer = setTimeout(() => currentTimer(), 1000 );\n\n      if (this.state.intervalCanceled) { \n        this.setState({ hoursInput: 0 });\n        this.setState({ minutesInput: 0 });\n        this.setState({ secondsInput: 0 });\n      }\n      \n      if ( (crntHours === 0 && crntMinutes === 0 && crntSecs === 0) || this.state.timerPaused) { \n        clearTimeout(timer) \n        if (!this.state.timerPaused) { this.setState({ timerInUse: false }); }\n      };\n\n      if (crntHours === 0 && crntMinutes === 0 && crntSecs === 0 && !this.state.intervalCanceled) {\n        this.setState({ statusBtn: 'start'});\n        alert('Interval Finished!')\n        let intervalTime = this.state.initialTime, timeAcr;\n        intervalTime = intervalTime.split(':');\n        \n        // Sets the timer value to look a certain way according to the inputs provided \n        if (intervalTime[0] === '0') {\n          if (intervalTime[1] === '0') {\n            intervalTime = intervalTime[2];\n            timeAcr = 'Sec'\n          } else {\n            intervalTime = `${intervalTime[1]}:${intervalTime[2]}`;\n            timeAcr = 'Min'\n          }\n        } else {\n          intervalTime = this.state.initialTime;\n          timeAcr = 'Hour'\n        }\n        \n        // Interval object to display each time the timer finishes a countdown \n        const interval = {time: `${intervalTime} ${timeAcr}`, interval: `interval ${this.state.crntSessionIntrvls.length}`};\n        this.setState(prevState => ({ crntSessionIntrvls: [...prevState.crntSessionIntrvls, interval ] }))\n      }\n    }\n\n    const onChange = async (e) => {\n      // Main onChange function that gathers all of the values for input and select elements and sets them on their corresponding states\n\n      if (e.target.className === 'sessionNameInput') { this.setState({ nameSessionInput: e.target.value }); }\n      \n      if (e.target.className === 'inputHours') { this.setState({ hoursInput: e.target.value }); }\n      \n      if (e.target.className === 'inputMinutes') { this.setState({ minutesInput: e.target.value }); }\n      \n      if (e.target.className === 'inputSeconds') { this.setState({ secondsInput: e.target.value }); }\n\n      if (e.target.className === 'descriptionInput') { this.setState({ descriptionInput: e.target.value });}\n\n      if (e.target.className === 'searchbar') {\n        // Searchbar function to filter out the timer sessions according to the value of the search input element\n        const searchResult = this.state.timerSessions.filter( session => session.name.toLowerCase().search(e.target.value) !== -1 )\n        this.setState({ timerSessions: searchResult });\n        \n        if (e.target.value.length < 1) {\n          await api.getAllSessions().then( sessions => this.setState({ timerSessions: sessions.data.data }));\n        }\n      }\n    \n    }\n\n    const onClick = async (e) => {\n      // Main onClick function \n      if (e.target.className === 'Link') {\n        // Sets the current view state on according to which route is clicked\n        if (e.target.id === 'clock') {\n          await this.setState({ timezone: 'America/New_York'});\n          setClock('America/New_York');\n\n          this.setState({ timerView: false });\n          this.setState({ sessionsView: false })\n          this.setState({ clockView: true });\n        }\n\n        if (e.target.id === 'timer') {\n          this.setState({ clockView: false });\n          this.setState({ sessionsView: false });\n          this.setState({ timerView: true });\n        }\n\n        if (e.target.id === 'sessions') {\n          let sessions;\n          await api.getAllSessions().then( allSessions => sessions = allSessions.data.data )\n          this.setState({ timerSessions: sessions });\n\n          this.setState({ clockView: false });\n          this.setState({ timerView: false });\n          this.setState({ sessionsView: true });\n        }\n      }\n\n      if (e.target.className === 'removeSessionBtn') {\n        // Removes a certain session from the database\n        await api.deleteSessionById(e.target.getAttribute('session')).then( session => alert('Session Deleted.') ).catch( err => this.setState({ timerSessions: '' }) );\n        await api.getAllSessions().then( sessions => this.setState({ timerSessions: sessions.data.data }) ).catch( err => this.setState({ timerSessions: '' }) )\n      }\n\n      if (e.target.className === 'timerSessionCls') {\n        // Takes cares of showing the open view of a individual session\n        this.setState({ currentSession: e.target.getAttribute('session') });\n        this.setState({ sessionOpen: !this.state.sessionOpen })\n      }\n\n      if (e.target.className === 'timerSessionOpen') {\n        // Takes cares of showing the closed view of a individual session\n        this.setState({ currentSession: '' });\n        this.setState({ sessionClosed: !this.state.sessionClosed });\n      }\n\n      if (e.target.className === 'indTimezone') {\n        // Changes the clock view according to the timezone value of each element \n        await this.setState({ timezone: e.target.getAttribute('timezone') });\n        setClock();\n      }\n\n      if (e.target.className === 'startPauseBtn') {\n        // Function to start and pause the timer according to the attribute of the start pause button \n        this.setState({ intervalCanceled: false });\n        if (e.target.getAttribute('current') === 'start') { \n          // The code will only run as long as there is a value for one of the time input states\n          if (this.state.hoursInput > 0 || this.state.minutesInput > 0 || this.state.secondsInput > 0) {\n            await this.setState({ initialTime: `${this.state.hoursInput}:${this.state.minutesInput}:${this.state.secondsInput}`});\n            await this.setState({ timerPaused: false });\n            currentTimer();\n\n            this.setState({ timerInUse: true });            \n            this.setState({ statusBtn: 'pause' }); \n          } else { alert('Enter time value for the timer to begin'); } \n        }\n        else if (e.target.getAttribute('current') === 'pause') {\n          currentTimer();\n          this.setState({ timerInUse: true })\n          this.setState({ timerPaused: true });\n          this.setState({ statusBtn: 'start' });\n        }\n\n      }\n      if (e.target.className === 'cancelBtn') {\n        // Cancels the current timer interval \n        this.setState({ statusBtn: 'start' });\n        this.setState({ timerInUse: false });\n        this.setState({ timerPaused: false });\n        this.setState({ intervalCanceled: true });\n        this.setState({ timerInUse: false });\n      }\n\n      if (e.target.id === 'removeTimerBtn') {\n        // Removes a certain interval from the current timer session \n        const updatedList = this.state.crntSessionIntrvls.filter( interval => interval.interval !== e.target.getAttribute('interval'))\n        this.setState({ crntSessionIntrvls: updatedList });\n      }\n\n      // Takes care of showing the open view of the save session element \n      if (e.target.className === 'saveBtn') { this.setState({ saveSessionOn: true }); }\n\n      if (e.target.className === 'saveSessionBtn') {\n        // Saves a the current timer session into the database \n        let object, descriptionInput, intervals = []; \n\n        if (!this.state.descriptionInput) {\n          descriptionInput = 'n/a';\n        } else descriptionInput = this.state.descriptionInput;\n        \n        await this.state.crntSessionIntrvls.forEach( interval => intervals.push(interval.time))\n\n        object = await {name: this.state.nameSessionInput, intervals: intervals, description: descriptionInput};\n        await api.insertSession(object).then( obj => alert('Session Added!') ).catch( err => alert('Error Occurred: Name of session and or intervals') );\n\n        this.setState({ saveSessionOn: false });\n      }\n    } \n\n    return (\n      <div className=\"container\">\n        <Router>\n          <div className='linkContainer'>\n            <p className='indLink'><Link className='Link' id='clock' to='/' onClick={onClick}>Clock</Link></p>\n            <p className='indLink'><Link className='Link' id='timer' to='/timer' onClick={onClick}>Timer</Link></p>\n            <p className='indLink'><Link className='Link' id='sessions' to='/sessions' onClick={onClick}>Sessions</Link></p>\n          </div>\n\n          <Routes>\n            <Route path='/' element={ <ClockView currentTimezone={this.state.timezone} clockTime={this.state.timeClock} onClick={onClick} /> }/>\n\n            <Route path='/timer' element={ <TimerView isSaveOn={this.state.saveSessionOn} intervals={this.state.crntSessionIntrvls} timerValue={this.state.timerValue} timerInUse={this.state.timerInUse} statusBtn={this.state.statusBtn} onClick={onClick} onChange={onChange}/> }/>\n            \n            <Route path='/sessions' element={ <TimerSSNSview currentSession={this.state.currentSession} isSessionOpen={this.state.isSessionOpen} isSessionClosed={this.state.sessionClosed} sessions={this.state.timerSessions} onClick={onClick} onChange={onChange} /> }/>\n          </Routes>\n\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}